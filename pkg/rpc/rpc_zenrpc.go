// Code generated by zenrpc v2.2.12; DO NOT EDIT.

package rpc

import (
	"context"
	"encoding/json"

	"github.com/vmkteam/zenrpc/v2"
	"github.com/vmkteam/zenrpc/v2/smd"
)

var RPC = struct {
	NewsService struct{ Get, GetByID, Count, Categories, Tags, ValidateSuggestion, Suggest string }
}{
	NewsService: struct{ Get, GetByID, Count, Categories, Tags, ValidateSuggestion, Suggest string }{
		Get:                "get",
		GetByID:            "getbyid",
		Count:              "count",
		Categories:         "categories",
		Tags:               "tags",
		ValidateSuggestion: "validatesuggestion",
		Suggest:            "suggest",
	},
}

func (NewsService) SMD() smd.ServiceInfo {
	return smd.ServiceInfo{
		Methods: map[string]smd.Service{
			"Get": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "req",
						Type:     smd.Object,
						TypeName: "NewsListReq",
						Properties: smd.PropertyList{
							{
								Name: "category_id",
								Type: smd.Integer,
							},
							{
								Name: "tag_id",
								Type: smd.Integer,
							},
							{
								Name: "page",
								Type: smd.Integer,
							},
							{
								Name: "per_page",
								Type: smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]News",
					Items: map[string]string{
						"$ref": "#/definitions/News",
					},
					Definitions: map[string]smd.Definition{
						"News": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
								{
									Name: "short_text",
									Type: smd.String,
								},
								{
									Name:     "content",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name:     "author",
									Optional: true,
									Type:     smd.String,
								},
								{
									Name: "published_at",
									Type: smd.String,
								},
								{
									Name:     "category",
									Optional: true,
									Ref:      "#/definitions/Category",
									Type:     smd.Object,
								},
								{
									Name: "tags",
									Ref:  "#/definitions/Tags",
									Type: smd.Object,
								},
							},
						},
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tags": {
							Type:       "object",
							Properties: smd.PropertyList{},
						},
					},
				},
			},
			"GetByID": {
				Parameters: []smd.JSONSchema{
					{
						Name: "id",
						Type: smd.Integer,
					},
				},
				Returns: smd.JSONSchema{
					Optional: true,
					Type:     smd.Object,
					TypeName: "News",
					Properties: smd.PropertyList{
						{
							Name: "id",
							Type: smd.Integer,
						},
						{
							Name: "title",
							Type: smd.String,
						},
						{
							Name: "short_text",
							Type: smd.String,
						},
						{
							Name:     "content",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name:     "author",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name: "published_at",
							Type: smd.String,
						},
						{
							Name:     "category",
							Optional: true,
							Ref:      "#/definitions/Category",
							Type:     smd.Object,
						},
						{
							Name: "tags",
							Ref:  "#/definitions/Tags",
							Type: smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tags": {
							Type:       "object",
							Properties: smd.PropertyList{},
						},
					},
				},
			},
			"Count": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "req",
						Type:     smd.Object,
						TypeName: "NewsListReq",
						Properties: smd.PropertyList{
							{
								Name: "category_id",
								Type: smd.Integer,
							},
							{
								Name: "tag_id",
								Type: smd.Integer,
							},
							{
								Name: "page",
								Type: smd.Integer,
							},
							{
								Name: "per_page",
								Type: smd.Integer,
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type: smd.Integer,
				},
			},
			"Categories": {
				Parameters: []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Category",
					Items: map[string]string{
						"$ref": "#/definitions/Category",
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
					},
				},
			},
			"Tags": {
				Parameters: []smd.JSONSchema{},
				Returns: smd.JSONSchema{
					Type:     smd.Array,
					TypeName: "[]Tag",
					Items: map[string]string{
						"$ref": "#/definitions/Tag",
					},
					Definitions: map[string]smd.Definition{
						"Tag": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "name",
									Type: smd.String,
								},
								{
									Name: "status_id",
									Type: smd.Integer,
								},
							},
						},
					},
				},
			},
			"ValidateSuggestion": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "req",
						Type:     smd.Object,
						TypeName: "NewsSuggestion",
						Properties: smd.PropertyList{
							{
								Name: "Title",
								Type: smd.String,
							},
							{
								Name: "Text",
								Type: smd.String,
							},
							{
								Name: "ShortText",
								Type: smd.String,
							},
							{
								Name: "CategoryID",
								Type: smd.Integer,
							},
							{
								Name: "Tags",
								Type: smd.Array,
								Items: map[string]string{
									"type": smd.String,
								},
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Type:       smd.Object,
					TypeName:   "ValidationErrors",
					Properties: smd.PropertyList{},
				},
			},
			"Suggest": {
				Parameters: []smd.JSONSchema{
					{
						Name:     "req",
						Type:     smd.Object,
						TypeName: "NewsSuggestion",
						Properties: smd.PropertyList{
							{
								Name: "Title",
								Type: smd.String,
							},
							{
								Name: "Text",
								Type: smd.String,
							},
							{
								Name: "ShortText",
								Type: smd.String,
							},
							{
								Name: "CategoryID",
								Type: smd.Integer,
							},
							{
								Name: "Tags",
								Type: smd.Array,
								Items: map[string]string{
									"type": smd.String,
								},
							},
						},
					},
				},
				Returns: smd.JSONSchema{
					Optional: true,
					Type:     smd.Object,
					TypeName: "News",
					Properties: smd.PropertyList{
						{
							Name: "id",
							Type: smd.Integer,
						},
						{
							Name: "title",
							Type: smd.String,
						},
						{
							Name: "short_text",
							Type: smd.String,
						},
						{
							Name:     "content",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name:     "author",
							Optional: true,
							Type:     smd.String,
						},
						{
							Name: "published_at",
							Type: smd.String,
						},
						{
							Name:     "category",
							Optional: true,
							Ref:      "#/definitions/Category",
							Type:     smd.Object,
						},
						{
							Name: "tags",
							Ref:  "#/definitions/Tags",
							Type: smd.Object,
						},
					},
					Definitions: map[string]smd.Definition{
						"Category": {
							Type: "object",
							Properties: smd.PropertyList{
								{
									Name: "id",
									Type: smd.Integer,
								},
								{
									Name: "title",
									Type: smd.String,
								},
							},
						},
						"Tags": {
							Type:       "object",
							Properties: smd.PropertyList{},
						},
					},
				},
			},
		},
	}
}

// Invoke is as generated code from zenrpc cmd
func (s NewsService) Invoke(ctx context.Context, method string, params json.RawMessage) zenrpc.Response {
	resp := zenrpc.Response{}
	var err error

	switch method {
	case RPC.NewsService.Get:
		var args = struct {
			Req NewsListReq `json:"req"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"req"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Get(ctx, args.Req))

	case RPC.NewsService.GetByID:
		var args = struct {
			Id int `json:"id"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"id"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.GetByID(ctx, args.Id))

	case RPC.NewsService.Count:
		var args = struct {
			Req NewsListReq `json:"req"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"req"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Count(ctx, args.Req))

	case RPC.NewsService.Categories:
		resp.Set(s.Categories(ctx))

	case RPC.NewsService.Tags:
		resp.Set(s.Tags(ctx))

	case RPC.NewsService.ValidateSuggestion:
		var args = struct {
			Req NewsSuggestion `json:"req"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"req"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.ValidateSuggestion(ctx, args.Req))

	case RPC.NewsService.Suggest:
		var args = struct {
			Req NewsSuggestion `json:"req"`
		}{}

		if zenrpc.IsArray(params) {
			if params, err = zenrpc.ConvertToObject([]string{"req"}, params); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		if len(params) > 0 {
			if err := json.Unmarshal(params, &args); err != nil {
				return zenrpc.NewResponseError(nil, zenrpc.InvalidParams, "", err.Error())
			}
		}

		resp.Set(s.Suggest(ctx, args.Req))

	default:
		resp = zenrpc.NewResponseError(nil, zenrpc.MethodNotFound, "", nil)
	}

	return resp
}
