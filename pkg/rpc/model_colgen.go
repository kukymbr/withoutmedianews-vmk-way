// Code generated by colgen v0.1.2; DO NOT EDIT.
package rpc

import (
	"apisrv/pkg/newsportal"
)

type Categories []Category

func (ll Categories) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll Categories) Index() map[int]Category {
	r := make(map[int]Category, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewCategories(in []newsportal.Category) Categories { return MapP(in, NewCategory) }

type NewsList []News

func (ll NewsList) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll NewsList) Index() map[int]News {
	r := make(map[int]News, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewNewsList(in []newsportal.News) NewsList { return MapP(in, NewNews) }

type Tags []Tag

func (ll Tags) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll Tags) Index() map[int]Tag {
	r := make(map[int]Tag, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewTags(in []newsportal.Tag) Tags { return MapP(in, NewTag) }

type ValidationErrors []ValidationError

func NewValidationErrors(in []newsportal.ValidationError) ValidationErrors {
	return MapP(in, NewValidationError)
}
