// Code generated by colgen v0.1.2; DO NOT EDIT.
package newsportal

import (
	"apisrv/pkg/db"
)

type Categories []Category

func (ll Categories) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll Categories) Index() map[int]Category {
	r := make(map[int]Category, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewCategories(in []db.Category) Categories { return MapP(in, NewCategory) }

type NewsList []News

func (ll NewsList) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll NewsList) Index() map[int]News {
	r := make(map[int]News, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func (ll NewsList) TagIDs() [][]int {
	r := make([][]int, len(ll))
	for i := range ll {
		r[i] = ll[i].TagIDs
	}
	return r
}

func (ll NewsList) UniqueTagIDs() []int {
	idx := make(map[int]struct{}, len(ll))
	for i := range ll {
		for _, v := range ll[i].TagIDs {
			if _, ok := idx[v]; !ok {
				idx[v] = struct{}{}
			}
		}
	}

	r, i := make([]int, len(idx)), 0
	for k := range idx {
		r[i] = k
		i++
	}
	return r
}

func NewNewsList(in []db.News) NewsList { return MapP(in, NewNews) }

type Tags []Tag

func (ll Tags) IDs() []int {
	r := make([]int, len(ll))
	for i := range ll {
		r[i] = ll[i].ID
	}
	return r
}

func (ll Tags) Index() map[int]Tag {
	r := make(map[int]Tag, len(ll))
	for i := range ll {
		r[ll[i].ID] = ll[i]
	}
	return r
}

func NewTags(in []db.Tag) Tags { return MapP(in, NewTag) }

func (ll Tags) IndexByName() map[string]Tag {
	r := make(map[string]Tag, len(ll))
	for i := range ll {
		r[ll[i].Name] = ll[i]
	}
	return r
}

type ValidationErrors []ValidationError
